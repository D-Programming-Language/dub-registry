extends layout

block title
	- auto title = "Package file format";

block body
	h2 Introduction

	p Every DUB package <em>should</em> contain a <code>package.json</code> file in its root folder. This file contains meta-information about the project and its dependencies. This information is used for building the project and for deploying it using the registry. The following sections give an overview of the recognized fields and their meaning. Note that any unknown fields are ignored for backwards compatibility reasons.

	p A typical example of a simple application that requires no platform specific setup:

	pre.code
		|{
		|	"name": "myproject",
		|	"description": "A little web service of mine.",
		|	"authors": ["Peter Parker"],
		|	"homepage": "http://myproject.com",
		|	"license": "GPL v2",
		|	"dependencies": {
		|		"vibe-d": ">=0.7.11"
		|	}
		|}


	h2#standard-fields Global fields

	table
		tr
			th Name
			th Type
			th Description
		
		tr
			td name [required]
			td
				code string
			td Name of the package, used to uniquely identify the package

		tr
			td description
			td
				code string
			td Brief description of the package

		tr
			td homepage
			td
				code string
			td URL of the project website

		tr
			td authors
			td
				code string[]
			td List of project authors

		tr
			td copyright
			td
				code string
			td Copyright declaration string

		tr
			td license
			td
				code string
			td License(s) under which the project can be used

		tr
			td dependencies
			td
				code T[string]
			td List of project dependencies given as pairs of <code>"&lt;name&gt;" : &lt;version-spec&gt;</code> - see next section for how version specifications look like

	
	h3#version-specs Version specifications

	p Some examples of typical version specifications:

	ul
		li Require a certain version: <code>"==1.3.0"</code>
		li Require a minimum version: <code>"&gt;=1.3.0"</code>
		li Require a version range: <code>"&gt;=1.3.0 &lt;=1.3.4"</code>
		li Use the GIT master branch: <code>"~master"</code>
		li Use a folder to source a package from: <code>{"version": "~master", "path": "path/to/package"}</code>

	
	h2#build-settings Build settings

	p Build settings fields influence the command line options passed to the compiler and linker. All fields are optional.

	p Platform specific settings are supported through the use of field name suffixes. Suffixes are dash separated platform identifiers, as defined in the <a href="http://dlang.org/version.html#PredefinedVersions">D language reference</a>. The order of these suffixes is <code>os-architecture-compiler</code>, where any of these parts can be left off. Examples:

	pre.code
		|{
		|	"dflags": ["-w"],
		|	"dflags-dmd": ["-gc"],
		|	"dflags-x86_64": ["-version=UseSpecialImpl"]
		|	"libs-posix": ["ssl", "crypto"],
		|	"files-windows-x86_64-dmd": ["lib/win32/mylib.lib"],
		|}

	p Inside of build setting values, it is possible to use variables using dollar notation. <code>$PACKAGE_DIR</code> contains the path to the package itself and all other variables are taken from the program environment.

	table
		tr
			th Name
			th Type
			th Description
		
		tr
			td targetType
			td
				code string
			td Specifies a specific <a href="#target-types">target type</a> - this field does not support platform suffixes
		
		tr
			td targetName
			td
				code string
			td Sets the base name of the output file; type and platform specific pre- and suffixes are added automatically - this field does not support platform suffixes

		tr
			td targetPath
			td
				code string
			td The destination path of the output binary - this field does not support platform suffixes

		tr
			td subConfigurations
			td
				code string[string]
			td Locks the dependencies to specific configurations; a map from package name to configuration name - this field does not support platform suffixes

		tr
			td dflags
			td
				code string[]
			td Additional flags passed to the D compiler - note that these flags are usually specific to the compiler in use, but a set of flags is automatically translated from DMD to the selected compiler

		tr
			td lflags
			td
				code string[]
			td Additional flags passed to the linker - note that these flags are usually specific to the linker in use

		tr
			td libs
			td
				code string[]
			td A list of external library names - depending on the compiler, these will be converted to the proper linker flag (e.g. "ssl" might get translated to "-L-lssl")

		tr
			td sourceFiles
			td
				code string[]
			td Additional files passed to the compiler - can be useful to add certain configuration dependent source files that are not contained in the general source folder

		tr
			td sourcePaths
			td
				code string[]
			td Allows to customize the path where to look for source files (any folder "source" or "src" is automatically used as a source path if no <code>sourcePaths</code> field is given)

		tr
			td excludedSourceFiles
			td
				code string[]
			td Files that should be removed for the set of already added source files (takes precedence over "sourceFiles" and "sourcePaths")

		tr
			td copyFiles
			td
				code string[]
			td Files that are copied to the applications directory - typically these are DLLs on Windows

		tr
			td versions
			td
				code string[]
			td A list of D versions to be defined during compilation

		tr
			td importPaths
			td
				code string[]
			td Additional import paths to search for D modules (the <code>soruce/</code> folder is used by default as a source folder, if it exists)

		tr
			td stringImportPaths
			td
				code string[]
			td Additional import paths to search for string imports/views (the <code>views/</code> folder is used by default as a string import folder, if it exists)
		tr
			td preGenerateCommands
			td
				code string[]
			td A list of shell commands that is executed before project generation is started
		tr
			td postGenerateCommands
			td
				code string[]
			td A list of shell commands that is executed after project generation is finished
		tr
			td preBuildCommands
			td
				code string[]
			td A list of shell commands that is executed always before the project is built
		tr
			td postBuildCommands
			td
				code string[]
			td A list of shell commands that is executed always after the project is built

	
	h3#target-types Target types

	p The following values are recognized for the <code>"targetType"</code> field:

	table
		tr
			th Value
			th Description
		tr
			td "autodetect"
			td Automatically detects the target type. This is the default global value and causes dub to try and generate "application" and "library" <a href="#configurations">configurations</a>. Use of other values limits the auto-generated configurations to either of the two. This value is not allowed inside of a configuration block.

		tr
			td "executable"</code>
			td Generates an executable binary

		tr
			td "library"</code>
			td Specifies that the package is to be used as a library, without limiting the actual type of library. This should be the default for most libraries.

		tr
			td "sourceLibrary"</code>
			td This target type does not generate a binary, but rather forces dub to add all source files directly to the same compiler invocation as the dependent project.

		tr
			td "staticLibrary"</code>
			td Forces output as a static library container.

		tr
			td "dynamicLibrary"</code>
			td Forces output as a dynamic/shared library.


	h2#configurations Configurations

	p In addition to platform specific build settings, it is possible to define build configurations. Build configurations add or override build settings to the global ones. To choose a configuration, use <code>dub --config=&lt;name&gt;</code>. By default, the first configuration that matches the target type and build platform is selected automatically. The configurations are defined by adding a "configurations" field.

	p If no configurations are specified, dub automatically tries to detect the two default configurations "application" and "library". The "application" configuration is only added if at least one of the following files is found: <code>source/app.d</code>, <code>source/&lt;package name&gt;.d</code>, <code>src/app.d</code>, <code>src/&lt;package name&gt;.d</code>. Those files are expected to contain only the application entry point (usually <code>main()</code>) and are only added to the "application" configuration.

	p The following example defines "metro-app" and "desktop-app" configurations that are only available on Windows and a "glut-app" configuration that is available on all platforms.

	pre.code
		|{
		|	...
		|	"configurations": [
		|		{
		|			"name": "metro-app",
		|			"targetType": "executable",
		|			"platforms": ["windows"],
		|			"versions": ["MetroApp"],
		|			"libs": ["d3d11"]
		|		},
		|		{
		|			"name": "desktop-app",
		|			"targetType": "executable",
		|			"platforms": ["windows"],
		|			"versions": ["DesktopApp"],
		|			"libs": ["d3d9"]
		|		},
		|		{
		|			"name": "glut-app",
		|			"targetType": "executable",
		|			"versions": ["GlutApp"]
		|		}
		|	]
		|}


	p In addition to the usual <a href="#build-settings">build settings</a>, the following fields are recognized inside of a configuration block:

	table
		tr
			th Name
			th Type
			th Description
		
		tr
			td name [required]
			td
				code string
			td Name of the configuration
		tr
			td platforms
			td
				code string[]
			td A list of platform suffixes (as used for the build settings) to limit on which platforms the configuration applies
