extends layout

block title
	- import std.algorithm;
	- import std.array : join;
	- import vibe.data.json;
	- import vibe.inet.url;
	- import vibe.textfilter.urlencode;
	- import dubregistry.viewutils;
	- import userman.controller;
	- auto title = "Package " ~ packageName ~ " version " ~ versionInfo["version"].get!string;

block css
	link(rel="stylesheet", type="text/css", href="#{req.rootDir}styles/common.css")
	- if (readmeContents.length)
		link(rel="stylesheet", type="text/css", href="#{req.rootDir}styles/markdown.css")

block body
	.main
		- import vibe.data.bson;
		- if (req.session && user.id == User.ID.fromString(req.session.get!string("userID")))
			a(href="#{req.rootDir}my_packages/#{packageName}") Manage this package

		- if (packageInfo["logo"].get!string.length)
			img.packageLogo(src=packageInfo["logo"].get!string)

		- if(packageName.canFind(":"))
			- string url = req.rootDir ~ "packages/" ~ urlEncode(packageInfo["name"].get!string);
			h1.
				#[a.blind(href="#{url}")=packageInfo["name"].get!string]#{find(packageName, ":")} #[strong.badge #{versionInfo["version"].get!string}]
		- else
			h1 #{packageName} #[strong.badge #{versionInfo["version"].get!string}]

		p= versionInfo["description"].opt!string
		br
		p To use this package, put the following dependency into your project's dependencies section:
		.clipboard-pkg
			- string expr = versionInfo["version"].get!string;
			- if( !expr.startsWith("~") ) expr = "~>" ~ expr;
			.clipboard-pkg-row
				.clipboard-pkg-title dub.json
				input(id="package-clipboard-json",value='"#{packageName}": "#{expr}"')
				button(class="btn-clipboard",data-clipboard-target="#package-clipboard-json")
					img(src="/images/clippy.svg", width=13, alt="Copy to clipboard")

			.clipboard-pkg-row
				.clipboard-pkg-title dub.sdl
				input(id="package-clipboard-sdl",value='dependency "#{packageName}" version="#{expr}"')
				button(class="btn-clipboard",data-clipboard-target="#package-clipboard-sdl")
					img(src="/images/clippy.svg", width=13, alt="Copy to clipboard")

		- if (versionInfo["subPackages"].opt!(Json[]).length)
			- bool helpWrited = false;
			- foreach(sp; versionInfo["subPackages"])
				- if(sp.type == Json.Type.object && sp["description"].opt!string)
					- if(!helpWrited)
						- helpWrited = true;
						br
						p This package provides sub packages which can be used individually:
					p
						- auto depname = packageName ~ ":" ~ sp["name"].get!string;
						a.blind(href="#{req.rootDir}packages/#{urlEncode(depname)}")
							|= depname
						|= "- " ~ sp["description"].opt!string

		hr
		- if (readmeContents.length)
			.repositoryReadme.markdown-body
				- import vibe.textfilter.markdown : MarkdownFlags, MarkdownSettings, filterMarkdown;
				- scope msettings = new MarkdownSettings;
				- msettings.flags = MarkdownFlags.backtickCodeBlocks|MarkdownFlags.noInlineHtml|MarkdownFlags.tables;
				- msettings.headingBaseLevel = 2;
				- msettings.urlFilter = &urlFilter;
				!= filterMarkdown(readmeContents, msettings)

	.packageInfo
		ul.unmarkedList
			- if (user.id != User.ID.init)
				li#registredBy Registered by
					a.blind(href="#{req.rootDir}users/#{user.id}")
						strong= user.fullName.length ? user.fullName : user.name
			- if (!packageInfo["versions"].empty)
			li#latestVersion #[strong= versionInfo["version"].get!string] released #{formatFuzzyDate(versionInfo["date"])}
			- if (auto pr = "repository" in packageInfo)
				- string repo_kind = (*pr)["kind"].get!string;
				- string repo_path, repo_prefix;
				- repo_path = (*pr)["owner"].get!string~"/"~(*pr)["project"].get!string;
				- switch (repo_kind)
					- default: break;
					- case "bitbucket": repo_prefix = "https://bitbucket.org/"; break;
					- case "github": repo_prefix = "https://github.com/"; break;
					- case "gitlab": repo_prefix = "https://gitlab.com/"; break;
				li#repository
					a.blind(class=repo_kind, href="#{repo_prefix}#{repo_path}")= repo_path

			- if( auto ph = "homepage" in versionInfo )
				- auto hpage = URL(ph.get!string);
				li#homepage
					a.blind(href="#{hpage.toString}")= hpage.host ~ hpage.localURI

			- if( auto pl = "license" in versionInfo )
				li#license= pl.get!string

			- if( auto pl = "copyright" in versionInfo )
				li#copyright= pl.get!string

		- if ("donationUrl" in versionInfo || "donationDetail" in versionInfo)
			//- TODO: move this if only for the button and detail after adding more actions
			.actions
				- if (auto url = "donationUrl" in versionInfo)
					a(href=url.get!string, target="_blank")
						button.primary.large Donate to the Author
				- if (auto detail = "donationDetail" in versionInfo)
					p.detail= detail.get!string

		dl
			- if( auto pa = "authors" in versionInfo )
				dt Authors:
				dd.wrap
					ul.authors.unmarkedList
						- foreach (author; pa.get!(Json[]))
							li= author.get!string

			- if (versionInfo["subPackages"].opt!(Json[]).length)
				dt Sub packages:
				dd.wrap
					- string[] subs;
					- foreach (sp; versionInfo["subPackages"])
						- auto name = sp["name"].get!string;
						- auto sub = "<span class=\"light\">" ~ packageName ~ ":</span>" ~ name;
						- subs ~= "<a class=\"blind\" href=\"" ~ req.rootDir ~ "packages/" ~urlEncode(packageName ~ ":" ~ name) ~ "\">" ~ sub ~ "</a>";
					|!= join(subs, ", ")

			dt Dependencies:
			dd.wrap
				- auto pd = "dependencies" in versionInfo;
				- if (pd && pd.length)
					- string[] deps;
					- foreach(string dep, unused; (*pd))
						- deps ~= "<a class=\"blind\" href=\"" ~ req.rootDir ~ "packages/" ~urlEncode(dep) ~ "\">" ~ dep ~ "</a>";
					|!= join(deps, ", ")
				- else
					|  none

			- if (auto ps = "systemDependencies" in versionInfo)
				dt System dependencies:
				dd.wrap= ps.get!string

			dt Versions:
			dd#versions
				- size_t counter;
				table
					- foreach_reverse(v; packageInfo["versions"])
						- if(counter >= 5)
							- break;
						- ++counter;
						- auto vs = v["version"].get!string;
						tr
							- if (vs == versionInfo["version"])
								td
									strong= vs
								td
									span= formatDate(v["date"])
							- else
								td
									a.blind(href='#{req.rootDir}packages/#{urlEncode(packageName)}/#{vs}')
										|= vs
								td
									span= formatDate(v["date"])
				span#showAll
					a.blind(href="#{req.rootDir}packages/#{urlEncode(packageName)}/versions")
						| Show all #{packageInfo["versions"].length} versions

			- auto stats = registry.getPackageStats(packageName);

			dt Download Stats:
			dd#stats
				ul.unmarkedList
					li
						p
							strong= stats.downloads.daily
							|  downloads today
					li
						p
							strong= stats.downloads.weekly
							|  downloads this week
					li
						p
							strong= stats.downloads.monthly
							|  downloads this month
					li
						p
							strong= stats.downloads.total
							|  downloads total

			- if ("showrating" in req.query)
				dt Rating:
				dd#rating(title="#{formatPackageStats(stats)}")= formatRating(stats.rating)

	script(type="application/javascript", src="/scripts/clipboard.min.js")
	:javascript
		new Clipboard('.btn-clipboard');
